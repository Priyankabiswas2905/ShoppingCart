{"version":3,"sources":["components/ProductImage/ProductImage.js","components/ProductDescription/ProductDescription.js","components/ProductPrice/ProductPrice.js","components/CartQuantity/CartQuantity.js","container/Products/Products.js","components/Modal/Modal.js","components/Modal/useModal.js","components/CartSummary/CartSummary.js","container/shoppingCart/shoppingCart.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","className","src","product_image","alt","product_name","Description","brand_name","quantity","price","mrp","CartQty","console","log","cartQtyInput","useRef","useState","is_exists","cart_value","state","setState","useEffect","cart","localStorage","getItem","JSON","parse","forEach","product","index","parseInt","product_id","cart_qty","cartUpdate","action","a","qty","current","value","state_qantity","splice","setItem","stringify","isCartUpdate","item","addToCart","exists","push","type","name","onClick","ref","readOnly","Product","Modal","isShowing","hide","summary","ReactDOM","createPortal","Fragment","aria-modal","aria-hidden","tabIndex","role","data-dismiss","aria-label","document","body","useModal","setIsShowing","toggle","CartSummary","total_qty","total_cost","setSummary","Promise","resolve","reject","length","then","result","error","Index","products","setProducts","isCartUpdated","setCartUpdate","is_updated","setIsUpdated","setCartUpdated","useCallback","fetch","res","json","status","map","key","App","isClear","this","React","Component","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.22baad46.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ProductImage.css\";\n\nconst Image = (props) => {\n\n  return (\n    <div className=\"image\">\n      <img src={props.product_image} alt={props.product_name} />\n    </div>\n  );\n};\n\nexport default Image;\n","import React from 'react';\nimport './ProductDescription.css'\n\nconst Description = (props) => {\n\n    return (\n        <div className=\"description\">\n            <span className=\"brand-name\">{props.brand_name}</span>\n            <span>{props.product_name}</span>\n            <span>{props.quantity} Qty Only available</span>\n        </div>\n    );\n}\n\nexport default Description;","import React from 'react';\nimport './ProductPrice.css'\n\nconst Description = (props) => {\n\n    return (\n        <div className=\"total-price\">\n            <span className=\"old-value\">\n                <del>\n                <span className=\"amount\">{ `Rs. ${props.price}` } </span>\n                </del>\n            </span>\n            <span  className=\"new-value\">\n                <ins>\n                <span className=\"amount\">{ `Rs. ${props.mrp}` }</span>\n                </ins>\n            </span>\n        </div>\n    );\n}\n\nexport default Description;","import React, { useEffect, useState, useRef } from 'react';\nimport './CartQuantity.css'\n\nconst CartQty = (props) => {\n    console.log(\"props: \", props);\n\n    const cartQtyInput = useRef(1);\n\n    const [state, setState] = useState({\n        is_exists: false,\n        cart_value: 1\n    });\n\n    useEffect(() => {\n\n        let cart = localStorage.getItem(\"cart_item\");\n        if(cart) {\n            cart = JSON.parse(cart);\n            cart.forEach((product, index) => {\n                if (parseInt(product.product_id) === parseInt(props.product_id)) {\n                    setState({cart_value: product.cart_qty, is_exists: true});\n                    return false;\n                }\n            });\n        }\n    }, [props.product_id]);\n\n    const cartUpdate = async (action) => {\n\n        let cart = localStorage.getItem(\"cart_item\");\n        var state_qantity;\n        if(action === 'add') {\n            let qty = parseInt(cartQtyInput.current.value);\n            if(qty +1 > props.quantity) {\n                return false;\n            }\n            state_qantity = qty + 1;\n        } else {\n            let qty = parseInt(cartQtyInput.current.value);\n            if(qty - 1 === 0) {\n                if(cart) {\n                    cart = JSON.parse(cart);\n                    await cart.forEach((product, index) => {\n                        if (parseInt(product.product_id) === parseInt(props.product_id)) {\n                            \n                            cart.splice(index, 1);\n                            localStorage.setItem(\"cart_item\", JSON.stringify(cart));\n                            setState({...state, is_exists: false});\n                            props.isCartUpdate();\n                        }\n                    });\n                }\n                return false;\n            }\n            state_qantity = qty - 1;\n        }\n        if(cart) {\n            cart = JSON.parse(cart);\n            cart.forEach((item, index) => {\n                if (parseInt(item.product_id) === parseInt(props.product_id)) {\n                    cart[index].cart_qty = state_qantity;\n                    localStorage.setItem(\"cart_item\", JSON.stringify(cart));\n                    props.isCartUpdate();\n                    setState({...state, cart_value: state_qantity});\n                    return false;\n                }\n            });\n        }\n    }\n\n    const addToCart = async () => {\n\n        let item = {\n            product_id: props.product_id,\n            quantity: props.quantity,\n            price: props.price,\n            mrp: props.mrp,\n            cart_qty: 1\n        };\n        let cart = localStorage.getItem(\"cart_item\");\n        if(cart) {\n            cart = JSON.parse(cart);\n            let exists = false;\n            await cart.forEach((item, index) => {\n                if (parseInt(item.product_id) === parseInt(props.product_id)) {\n                    exists = true;\n                    return false;\n                }\n            });\n            if(!exists) {\n                cart.push(item);\n                localStorage.setItem(\"cart_item\", JSON.stringify(cart));\n                props.isCartUpdate();\n                setState({...state, is_exists: true});\n            }\n            return false;\n        }\n        cart = [];\n        cart.push(item);\n        localStorage.setItem(\"cart_item\", JSON.stringify(cart));\n        props.isCartUpdate();\n        setState({...state, is_exists: true});\n    }\n\n    return (\n        <div className=\"quantity\">\n            {\n                state.is_exists ? \n                <div>\n                    <button className=\"plus-btn\" type=\"button\" name=\"button\" onClick={ () => cartUpdate('add') }>\n                        <img src=\"/static/plus.svg\" alt=\"\" />\n                    </button>\n                    <input type=\"text\" name=\"name\" value={state.cart_value} ref={cartQtyInput} readOnly/>\n                    <button className=\"minus-btn\" type=\"button\" onClick={ () => cartUpdate('minus') } name=\"button\">\n                        <img src=\"/static/minus.svg\" alt=\"\" />\n                    </button>\n                </div> : <button className=\"add-to-cart\" onClick={ addToCart }>Add to Cart</button>\n            }\n        </div>\n    );\n}\n\nexport default CartQty;","import React from \"react\";\nimport Image from \"../../components/ProductImage/ProductImage\";\nimport Description from \"../../components/ProductDescription/ProductDescription\";\nimport Price from \"../../components/ProductPrice/ProductPrice\";\nimport CartQty from \"../../components/CartQuantity/CartQuantity\";\nimport \"./Products.css\";\n\nconst Product = (props) => {\n  return (\n    <div className=\"item\">\n      <Image product_image={props.product_image} product_name={props.product_name}/>\n      <Description\n        brand_name={props.brand_name}\n        product_name={props.product_name}\n        quantity={props.quantity}\n      />\n      <CartQty {...props} />\n      <Price price={props.price} mrp={props.mrp} />\n    </div>\n  );\n};\n\nexport default Product;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Modal.css\";\n\nconst Modal = ({ isShowing, hide, summary }) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <div className=\"modal-overlay\" />\n          <div\n            className=\"modal-wrapper\"\n            aria-modal\n            aria-hidden\n            tabIndex={-1}\n            role=\"dialog\"\n          >\n            <div className=\"modal\">\n              <div className=\"modal-header\">\n                <button\n                  type=\"button\"\n                  className=\"modal-close-button\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                  onClick={hide}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div className='total-cost'>\n                Total Cost: <span className='amt'>{summary}</span>\n              </div>\n              <div className='transaction'>\n               Your transaction was successful !!!\n              </div>\n            </div>\n          </div>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nexport default Modal;\n","import { useState } from 'react';\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n  \n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle,\n  }\n};\n\nexport default useModal;","import React, { useEffect, useState } from \"react\";\nimport \"./CartSummary.css\";\nimport Modal from \"../Modal/Modal.js\";\nimport useModal from \"../Modal/useModal.js\";\n\nconst CartSummary = (props) => {\n  const { isShowing, toggle } = useModal();\n\n  const [summary, setSummary] = useState({\n    total_qty: 0,\n    total_cost: 0,\n  });\n\n  useEffect(() => {\n    let cart = localStorage.getItem(\"cart_item\");\n    if (cart) {\n      var promise = new Promise((resolve, reject) => {\n        var total_qty = 0;\n        var total_cost = 0;\n        cart = JSON.parse(cart);\n        if (cart.length <= 0) {\n          reject(\"No items in cart\");\n        }\n        cart.forEach((product, index) => {\n          total_cost += product.mrp * product.cart_qty;\n          total_qty += product.cart_qty;\n        });\n        resolve({\n          total_cost: total_cost,\n          total_qty: total_qty,\n        });\n      });\n\n      promise.then(\n        (result) => {\n          setSummary({\n            total_cost: result.total_cost,\n            total_qty: result.total_qty,\n          });\n        },\n        function (error) {\n          console.log(error, \"Reject\");\n        }\n      );\n    }\n  }, [props]);\n\n  return (\n    <div className=\"items summary\">\n      <div className=\"cart-total\">\n        <span className=\"title-cart\">\n          Total Qty: <span>{summary.total_qty}</span>\n        </span>\n        <span className=\"title-cart\">\n          Total Cost: <span>Rs. {summary.total_cost}</span>\n        </span>\n      </div>\n      <div className=\"cart-btn\">\n        <button className=\"add-to-cart\" onClick={toggle}>\n          Checkout\n        </button>\n        {summary.total_cost > \"0\" ? (\n          <Modal\n            summary={summary.total_cost}\n            isShowing={isShowing}\n            hide={toggle}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default CartSummary;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport Product from \"../Products/Products\";\nimport CartSummary from \"../../components/CartSummary/CartSummary\";\n\nconst Index = (props) => {\n  const [products, setProducts] = useState([]);\n  const [isCartUpdated, setCartUpdate] = useState(true);\n  const [is_updated, setIsUpdated] = useState(true);\n\n  const setCartUpdated = useCallback(() => {\n    setIsUpdated(is_updated ? false : true, [is_updated]);\n  });\n\n  const isCartUpdate = useCallback(() => {\n    setCartUpdate(isCartUpdated ? false : true, [isCartUpdated]);\n  });\n\n  useEffect(() => {\n    fetch(\"/productList.json\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          if (parseInt(result.status) === 200) {\n            setProducts(result.products);\n          } else {\n            console.log(\"Could not fetch data\");\n          }\n        },\n        (error) => {\n          console.log(error, \"Error\");\n        }\n      );\n  }, [props]);\n\n  return (\n    <div>\n      {products.length > 0\n        ? products.map((product, index) => {\n            return (\n              <Product\n                isCartUpdate={isCartUpdate}\n                is_updated={is_updated}\n                setCartUpdate={setCartUpdated}\n                {...product}\n                key={`product-${index}`}\n              />\n            );\n          })\n        : \"\"}\n      <CartSummary isCartUpdated={isCartUpdated} />\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport \"./App.css\";\nimport ProductList from \"../src/container/shoppingCart/shoppingCart\";\n\nconst cleanCart = () => {\n  localStorage.removeItem(\"cart_item\");\n  this.setState({\n    isClear: true,\n  });\n};\nclass App extends React.Component {\n  state = {\n    isClear: false,\n  };\n\n  render() {\n    const { isClear } = this.state;\n    return (\n      <>\n        <div className=\"shopping-cart\">\n          <div className=\"title header-pan\">Shopping Bag</div>\n          <ProductList isClear={isClear} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}